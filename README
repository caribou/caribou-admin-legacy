# Interface Admin mark III --------------

## Setup ----------------------------

Install the core caribou api repository: https://github.com/kaleidomedallion/caribou
Add the following to your /etc/hosts file:

  127.0.0.1 api.caribou.local
  127.0.0.1 admin.caribou.local

ngingx
Include the respective nginx config files from each repository in your main nginx config, 
and swap out the root paths to point to your installation directory.

Apache httpd
Include the respective Apache *-vhost config files from each repository in your main httpd config,
making sure to change the root paths to point at your local installation directory.


## Usage ----------------------------

Navigate to http://admin.caribou.local

Enjoy!


## FIXME
  can't remove products from category
  adding multiple new association instances causes issues with layering, events


## TODO
create associations on model instances
  - get it to work with habtm

  - create a category and create a new product on the fly
  - create a product and a new category on the fly

page tree handling, sorting, blah'ing


## NOTES

association identity
  ideally I would be able to target a field on the association when I create the link



new product on the fly
search for a product, if I can't find it, use the place holder text as a link
  the new link will open up a lightbox (ugh) with the new product form
  category selection will be disabled (have to check against the current url maybe?)

  when the form is submitted the dialog should disappear and the new id should be selected
    this will just be the illusion of a new record though
    won't actually save it to the db when the dialog is submitted
    it will have to just create the hidden fields for the new product
    then add basically a blank field to the select
    will bind events to that select to remove the hidden fields when its x'd out
  



// Temporary: reset the hidden inputs
$(selector).find('input[type=hidden]').remove();

// Setup an input template
var $input = $('<input type="hidden" />');

// For each selected option
_.each($(e.target).find('option:selected'), function(opt) {
  // Build an input for each of the required types
  var $i = $input.clone()
            .attr('name', model.slug +'['+ field.slug +'][][id]')
            .val(opt.value);

  $(selector).append($i);
});

